@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager

<PageTitle>Hub Chat</PageTitle>

<div class="row">
    <div class="col-ld-7">
        <div class="card-header">Hub Chat</div>
        <div class="card-body">

            <ul class="list-group">
                @foreach(var message in Messages)
                {
                    <li class="mb-2">@message</li>
                }
            </ul>
            <div class="border-primary">
                <div class="hstack gap-2">
                    <input type = "text" class="form-control w-25" @bind = "user_name"/>
                    <textarea class="form-control" @bind ="message" />

                </div>

                <button class="btn btn-success" @onclick="Send">Send Message</button>
            </div>

        </div>
        <div class="card-footer">
            @if (!IsCOnnected)
            {
                <div class="alert alert-danger"> Chat Disconnected </div>
            }
            else
            {
                <div class="alert alert-success"> Chat Connected </div>
            }
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> Messages = [];

    private string? user_name;
    public string? message;
    private DateTime date = DateTime.Now;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string, DateTime>("receive_message", (user_name, message, date)=>
        {
            var concatMessage = $"{date}{Environment.NewLine}{user_name}{Environment.NewLine}{message}";
            Messages.Add(concatMessage);
            InvokeAsync(() =>  StateHasChanged());
        });

        await hubConnection.StartAsync();


    }

    private bool IsCOnnected =>
    hubConnection!.State == HubConnectionState.Connected;

    Task Send() =>
    hubConnection!.SendAsync("SendMessage", user_name, message, date);


}
